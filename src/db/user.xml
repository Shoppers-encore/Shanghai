<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="User">

	<!-- User DB (member log-in) -->
	<select id="checkUserId" parameterType="String" resultType="int">
		select count(*) from jk_user where id=#{id} 
	</select>
	<select id="getUserId" parameterType="String" resultType="databean.UserDataBean">
		select * from jk_user where id=#{id}
	</select>
	
	
	<!-- Product DB -->
	<select id="getProductCount" parameterType="java.util.Map" resultType="int">
		SELECT count(*) FROM (SELECT tmp1.* FROM (SELECT * FROM jk_product WHERE productName LIKE '%'||#{searchWord}||'%') tmp1 <include refid="colorSearch"></include> ) WHERE productCode LIKE '%'||'MM' OR productCode LIKE '%'||'FR'
	</select>
	<select id="getProductList" parameterType="java.util.Map" resultType="databean.ProductDataBean">
		SELECT tmp3.* FROM(SELECT tmp2.*, rownum r FROM (SELECT tmp.* FROM ( SELECT list.* FROM (SELECT * from jk_product WHERE productName LIKE '%'||#{searchWord}||'%') list
				<include refid="colorSearch"></include>) tmp WHERE productCode LIKE '%'||'MM' OR productCode LIKE '%'||'FR') tmp2 ) tmp3
		WHERE r &gt;= TO_NUMBER(#{start}) AND r &lt;= TO_NUMBER(#{end})
	</select>
	<select id="getProductName" parameterType="String" resultType="String">
		SELECT productName FROM jk_product WHERE productCode=#{productCode}
	</select>
	<select id="getProductDetail" parameterType="int" resultType="databean.ProductDataBean">
		SELECT * FROM jk_product WHERE TO_CHAR(ref)!=productCode AND ref=#{ref}
	</select>
	<select id="getProductCodesByRef" parameterType="String" resultType="databean.ProductDataBean">
		SELECT productCode FROM jk_product WHERE ref=#{ref} AND LENGTH(productCode)>3
	</select>
	<select id="getProductThumbnail" parameterType="String" resultType="String">
		SELECT thumbnail FROM jk_product WHERE productCode=#{productCode}
	</select>
	<select id="getProductNoSearch" parameterType="java.util.Map" resultType="int">
		SELECT count(*) FROM jk_product <include refid="cate"></include> productCode=TO_CHAR(ref)
	</select>
	<select id="getProductNoSearchList" parameterType="java.util.Map" resultType="databean.ProductDataBean">
		SELECT tmp.*, r FROM (SELECT list.*, rownum r FROM (SELECT * FROM jk_product <include refid="cate"></include> productCode=TO_CHAR(ref) ORDER BY productRegDate desc) list) tmp WHERE r &gt;=TO_NUMBER(#{start}) AND r &lt;=TO_NUMBER(#{end})
	</select>
	
	
	<!-- Review -->
	<select id="getReviewCount" parameterType="java.util.Map" resultType="int">
		SELECT count(*) From jk_review <include refid="search"></include>
	</select>
	<select id="getReviewList" parameterType="java.util.Map" resultType="databean.ReviewDataBean">
		SELECT tmp.* , r FROM (SELECT temp.* , rownum r FROM
			(SELECT * FROM jk_review <include refid="search"></include> ORDER BY reviewDate desc) temp ORDER BY reviewDate desc) tmp WHERE r &gt;= TO_NUMBER(#{start}) AND r &lt;= TO_NUMBER(#{end})
	</select>
	<insert id="insertReview" parameterType="databean.ReviewDataBean">
			INSERT INTO jk_review (reviewNo, title, reviewContent, reviewDate, id, productCode, rating, photo1, photo2) 
			VALUES (reviewNoSEQ.NEXTVAL, #{title}, #{reviewContent}, sysdate, #{id}, #{productCode}, #{rating}, #{photo1}, #{photo2})
	</insert>
	<select id="selectReview" parameterType="int" resultType="databean.ReviewDataBean">
			SELECT * FROM jk_review WHERE reviewNo=#{num}
	</select>
	<select id="getReviewLikes" parameterType="int" resultType="int">
			SELECT count(*) FROM jk_reviewScore WHERE reviewNo=#{reviewNo}
	</select>
	<select id="getReviewLike" parameterType="java.util.Map" resultType="int">
			SELECT count(*) FROM jk_reviewScore WHERE TO_CHAR(reviewNo)=#{reviewNo} AND id=#{id}
	</select>
	<insert id="insertReviewLike" parameterType="java.util.Map">
			INSERT INTO jk_reviewScore (reviewNo, id) VALUES(TO_NUMBER(#{reviewNo}), #{id})
	</insert>
	<delete id="deleteReviewLike" parameterType="java.util.Map">
			DELETE FROM jk_reviewScore WHERE reviewNo=#{reviewNo} AND id=#{id}
	</delete>
	<delete id="deleteReview" parameterType="int">
			DELETE FROM jk_review WHERE reviewNo=#{num}
	</delete>
	<update id="modifyReview" parameterType="databean.ReviewDataBean">
			UPDATE jk_review SET title=#{title}, reviewContent=#{reviewContent}, rating=#{rating} WHERE reviewNo=#{reviewNo}
	</update>
	<insert id="insertComment" parameterType="databean.CommentDataBean">
			INSERT INTO jk_comment(reviewNo, commentNo, id, commentContent, commentDate)
			VALUES(#{reviewNo}, commentNoSEQ.NEXTVAL, #{id}, #{commentContent, jdbcType=VARCHAR}, SYSDATE)
	</insert>
	<select id="getComment" parameterType="int" resultType="databean.CommentDataBean">
		select * from jk_comment where reviewNo=#{reviewNo} order by commentNo desc
	</select>
	<update id="updateComment" parameterType="databean.CommentDataBean">
		UPDATE jk_comment set commentContent = #{commentContent} where commentNo = #{commentNo}
	</update>
	<delete id="deleteComment" parameterType="int">
		delete from jk_comment where commentNo = #{commentNo}
	</delete>
	
	
	<!-- Basket -->
	<select id="getBasketList" parameterType="String" resultType="databean.BasketDataBean">
		SELECT b.productCode, b.basketQuantity, p.productName, p.thumbnail FROM jk_basket b, jk_product p WHERE b.id=#{id} AND p.productCode=b.productCode 
	</select>
	<select id="getBasketCount" parameterType="String" resultType="int">
		SELECT count(*) FROM jk_basket WHERE id=#{id}
	</select>
	<delete id="deleteBasketItem" parameterType="databean.BasketDataBean">
		DELETE FROM jk_basket WHERE id=#{id} AND productCode=#{productCode}
	</delete>
	<insert id="inputBasket" parameterType="databean.BasketDataBean">
		INSERT INTO jk_basket VALUES (#{id}, #{productCode}, #{basketQuantity})
	</insert>
	
	
	<!-- Order -->
	<select id="getDistinctOrderCountById" parameterType="String" resultType="int">
		SELECT count(DISTINCT orderCode) FROM jk_orderList WHERE id=#{id} 
	</select>
	<select id="getDistinctOrderListById" parameterType="java.util.Map" resultType="databean.OrderListDataBean">
		SELECT orderCode, orderStatus, orderAddress1, orderAddress2, orderZipcode, orderDate
		FROM 
		(SELECT orderCode, orderStatus, orderAddress1, orderAddress2, orderZipcode, orderDate, rownum r 
		FROM 
		(SELECT DISTINCT orderCode, orderStatus, orderAddress1, orderAddress2, orderZipcode, orderDate 
		FROM jk_orderList 
		WHERE id=#{id} 
		ORDER BY orderDate DESC)
		)
		WHERE r between #{start} and #{end}
	</select>
  	<select id="getOrderListByOrderCode" parameterType="int" resultType="databean.OrderListDataBean">
  		SELECT o.productCode, p.productName, p.thumbnail, o.orderQuantity, o.orderPrice, o.orderStatus, o.orderAddress1, o.orderAddress2, o.orderZipcode
  		FROM jk_orderList o, jk_product p 
  		WHERE o.productCode=p.productCode AND o.orderCode=#{orderCode}
  	</select>
  	
  	<!-- chatting -->
  	<select id="getChatList" parameterType="String" resultType="databean.ChatDataBean">
  		SELECT * FROM jk_chat WHERE sender=#{id} OR receiver=#{id} ORDER BY chatdate desc
  	</select>
  	<insert id="chatInput" parameterType="databean.ChatDataBean">
  		INSERT INTO jk_chat VALUES(#{sender}, #{receiver}, #{chatContent}, sysdate)
  	</insert>
  	
  	<!-- Search -->
	<sql id="search">
        <choose>
           <when test="searchType=='ttl'">
              WHERE title LIKE '%'||#{searchWord}||'%'
           </when>
           <when test="searchType=='ctt'">
              WHERE reviewContent LIKE '%'||#{searchWord}||'%'
           </when>
           <when test="searchType=='both'">
              WHERE title LIKE '%'||#{searchWord}||'%' OR reviewContent LIKE '%'||#{searchWord}||'%'
           </when>
           <when test="searchType=='writer'">
              WHERE id LIKE '%'||#{searchWord}||'%'
           </when>
           <otherwise>
               
           </otherwise>
        </choose>
     </sql>
	
	<sql id="colorSearch">
		WHERE
		<if test="selectedColors.contains('WH')">
			productCode LIKE 'WH'||'%' OR
		</if>
		<if test="selectedColors.contains('BK')">
			productCode LIKE 'BK'||'%' OR
		</if>
		<if test="selectedColors.contains('RD')">
			productCode LIKE 'RD'||'%' OR
		</if>
		<if test="selectedColors.contains('BL')">
			productCode LIKE 'BL'||'%' OR
		</if>
		<if test="selectedColors.contains('GN')">
			productCode LIKE 'GN'||'%' OR
		</if>
		<if test="selectedColors.contains('YL')">
			productCode LIKE 'YL'||'%' OR
		</if>
		<if test="selectedColors.contains('BR')">
			productCode LIKE 'BR'||'%' OR
		</if>
		<if test="selectedColors.contains('NV')">
			productCode LIKE 'NV'||'%' OR
		</if>
		<if test="selectedColors.contains('GR')">
			productCode LIKE 'GR'||'%' OR
		</if>
		<if test="selectedColors.contains('BG')">
			productCode LIKE 'BG'||'%' OR
		</if>
		<if test="selectedColors.contains('SK')">
			productCode LIKE 'SK'||'%' OR
		</if>
		<if test="selectedColors.contains('ETC')">
			productCode LIKE 'PK'||'%' OR
			productCode LIKE 'PP'||'%' OR
			productCode LIKE 'OR'||'%' OR
		</if>
		<if test="selectedColors==null">
			productCode LIKE '' || '%' OR
		</if>
		productCode LIKE '0000'||'%'
	</sql>
	<sql id="cate">
		<choose>
			<when test="category == 'TOP'">
				WHERE productcategory &lt;= 10 AND
			</when>
			<when test="category == 'BOTTOM'">
				WHERE productcategory &gt; 10 AND
			</when>
			<otherwise>
				WHERE
			</otherwise>
		</choose>
	</sql>
</mapper>